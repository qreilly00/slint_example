import "../../font/RobotoMono-Regular.ttf";

import {ScrollView, ListView, CheckBox} from "std-widgets.slint";

component Title inherits Text {
    font-family: "Roboto Mono";
    font-size: 18px;

    color: black;

    y: 5px;

    horizontal-alignment: center;
}

component CreateButton inherits Rectangle {
    Image {
        source: @image-url("../image/plus.svg");

        colorize: black;

        width: root.width;
        height: root.height;
    }

    width: 18px;
    height: 18px;
}

component DeleteButton inherits Rectangle {
    Image {
        source: @image-url("../image/delete.svg");

        colorize: black;

        width: root.width;
        height: root.height;
    }

    in property <length> len_root_width;

    width: 18px;
    height: 18px;

    x: len_root_width - (self.width + 5px);
    y: 5px;
}

component TickBox inherits CheckBox {
    accessible-role: checkbox;

    width: 18px;
    height: 18px;
}

component MoveButton inherits Rectangle {
    Image {
        source: @image-url("../image/move.png");

        colorize: black;

        width: root.width;
        height: root.height;
    }

    width: 18px;
    height: 18px;
}

component Title inherits Text {
    font-family: "Roboto Mono";
    font-size: 18px;

    color: black;

    y: 5px;

    horizontal-alignment: center;
}

component TextBox inherits Rectangle {
    TextInput {
        font-family: "Roboto Mono";
        font-size: 18px;

        color: black;

        width: 100%;
        height: 100%;

        padding: 12px;

        horizontal-alignment: left;
        vertical-alignment: center;
    }

    preferred-width: 100%;
    height: 95%;

    background: white;

    border-color: black;
    border-width: 1px;
    border-radius: 6px;
}

component CheckableItem inherits Rectangle {
    in property <length> len_root_width;

    width: len_root_width - 32px;
    height: 32px;

    background: white;

    border-color: black;
    border-width: 1px;
    border-radius: 6px;

    VerticalLayout {
        alignment: center;

        HorizontalLayout {
            MoveButton {opacity: 50%;}
            TickBox {}

            HorizontalLayout {
                TextBox {}

                padding-left: 6px;
                padding-right: 6px;
                padding-top: -4px;
                padding-bottom: -4px;
            }

            DeleteButton {len_root_width: root.width;}

            padding: 6px;
        }
    }
}

component Checklist inherits Rectangle {
    in property <length> len_root_width;
    in property <length> len_root_height;

    in property <string> str_title;

    width: len_root_width - 32px;
    height: len_root_height - 64px;

    background: white;

    border-color: black;
    border-width: 1px;
    border-radius: 6px;
}

component ChecklistContainer inherits Rectangle {
    in property <length> len_root_width;
    in property <length> len_root_height;

    width: len_root_width - 32px;
    height: len_root_height - 32px;

    background: white;

    border-color: black;
    border-width: 1px;
    border-radius: 6px;
}

struct ChecklistInfo {str_title: string}
struct CheckableItemInfo {}

export component ChecklistApp inherits Window {
    property <length> len_width: 512px;
    property <length> len_height: 512px;

    width: len_width;
    height: len_height;

    in-out property <[ChecklistInfo]> arr_checklist;
    in-out property <[CheckableItemInfo]> arr_checkable_item;

    container := ChecklistContainer {
        len_root_width: len_width;
        len_root_height: len_height;

        VerticalLayout {
            HorizontalLayout {
                CreateButton {}
                Title {text: "Checklist App";}
                DeleteButton {len_root_width: root.width;}

                padding: 6px;
            }
            ScrollView {
                //width: root.width;
                VerticalLayout {
                    for current[i] in arr_checklist : HorizontalLayout {
                        alignment: center;
                        check := Checklist {
                            len_root_width: container.width;
                            len_root_height: container.height;

                            VerticalLayout {
                                HorizontalLayout {
                                    CreateButton {}
                                    Title {text: current.str_title;}
                                    DeleteButton {len_root_width: check.width;}

                                    padding: 6px;
                                }
                                ScrollView {
                                    //width: root.width;
                                    /*VerticalLayout {
                                        for i in arr_checklist : HorizontalLayout {
                                            alignment: center;
                                            Checklist {
                                                len_root_width: root.width;
                                                len_root_height: root.height;

                                            }
                                        }
                                    }*/
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

/* Keeping this for future use.
ScrollView {
    // Main Content
    // Vertical layout helps maintain a stack
    VerticalLayout {
        //Horizontal layout allows the alignment attribute to be assigned to the checkable item.
        HorizontalLayout {
            alignment: center;

            Checklist {
                len_root_width: root.width;
                len_root_height: root.height;

                padding: 16px;

                str_title: "Checklist 1";
            }
        }
    }
}
*/
